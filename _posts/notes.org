
* TODO First Edit [3/4] [75%]
<2018-12-13 jue>
** DONE Intro 
*** P1
**** DONE Fix
     CLOSED: [2018-12-13 jue 21:52]
**** finally final
**** Shorten intro?
**** Linux thing unnecessary 
*** P2
**** DONE Fix
     CLOSED: [2018-12-13 jue 21:52]
**** Great entry point?
**** Already send them to leave
**** Merge with the first paragraph, too long maybe not necessary as an intro
*** P3
**** DONE Fix
     CLOSED: [2018-12-13 jue 21:52]
**** too long, 80%
**** The dialogue part is completely uneccessary
*** P4
**** DONE Fix 
     CLOSED: [2018-12-13 jue 21:52]
**** Cool but not necessary
*** P5
**** DONE Fix
     CLOSED: [2018-12-13 jue 21:52]
**** explains the reasoning
**** soul so to speak 
**** Part 2
*** TLDR
**** DONE Fix
     CLOSED: [2018-12-13 jue 21:52]
**** Unified lighting not discussed
**** or, clusters, 
** DONE Part 1 [6/6] [100%]
   CLOSED: [2018-12-19 mié 17:22]
*** DONE Intro
    CLOSED: [2018-12-14 vie 19:46]
**** Is the warning really necessary?
**** Core concepts [10/10] [100%]
     - [X] We want to discuss some specific important concepts in the topic of efficient shading
     - [X] Efficient rendering is needed to render nearly anything these days
     - [X] Impossible to get modern graphics without some form of it
     - [X] Specify what portion of the rendering pipeline we are trying to improve upon
     - [X] Explain there are other methods that also improve performance but assume we don't care about it
     - [X] We will be focusing on pixel shader evaluations to be exact
     - [X] Strip away unimportant details
     - [X] No free lunch and overhead
     - [X] Future performance trends and what kinds of algorithms we'll in the future
     - [X] Ending
*** DONE Forward shading [8/8] [100%]
    CLOSED: [2018-12-15 sáb 09:49]
    - [X] Explain the basics of forward shading
    - [X] Explain the term of forward shadin
    - [X] Explain where it fails
    - [X] Explain shader program issues
    - [X] Explain overdraw animation
    - [X] Explain overdraw
    - [X] Why is overdraw a problem in forward
    - [X] Present solutions to overdraw
*** DONE Deferred Shading [15/15] [100%]
    CLOSED: [2018-12-16 dom 17:44]
    - [X] Performing the visibility and shading steps separately
    - [X] Fix pseudocode
    - [X] Z-Prepass
    - [X] Haven't eliminated overdraw
    - [X] Initial ranges of depth buffer
    - [X] What people refer to when they talk about deferred shading
    - [X] G-Buffer
    - [X] Explain contents of gbuffer
    - [X] Reading and writing memory costs
    - [X] Small Detour about memory
    - [X] Single pass setup
    - [X] Why go deferred if reading and writing memory is so expensive
    - [X] Issues with Deferred
    - [X] Possible solutions to issue
    - [X] Introduction to light culling
*** DONE Tiled Shading Forward + [15/15] [100%]
    CLOSED: [2018-12-18 mar 14:26]
    - [X] Fix pseudocode
    - [X] Need to know about compute shaders and GPU's
    - [X] Efficient light culling
    - [X] Light area of effect
    - [X] Analogy to collision detection
    - [X] Discuss animation
    - [X] Tiled is valid for both forward and deferred
    - [X] Size of tiles
    - [X] Present issues
    - [X] View frustum
    - [X] Depth Discontinuities 
    - [X] Min max of tile depth
    - [X] World we try to represent is 3D but tiling is 2D
    - [X] Screen Space dependency 
    - [X] Present solutions
*** DONE Clustered shading [12/12] [100%]
    CLOSED: [2018-12-18 mar 21:37]
    - [X] Fix pseudocode
    - [X] Introduce main idea
    - [X] How similar this is to tiled
    - [X] Explain image
    - [X] Z-prepass is not necessary but will want to do it
    - [X] We already know the shape and size of the view frustum before rendering
    - [X] O notation
    - [X] Algorithmic complexity
    - [X] Using CPUS possible
    - [X] Supports transparency
    - [X] Supports MSAA again
    - [X] There are still issues and things that could be improved but we will discuss below
*** DONE Comparing algorithms [8/8] [100%]
    CLOSED: [2018-12-19 mié 17:22]
    - [X] transition question Mehnaaz
    - [X] Imgur link
    - [X] Fixed math equations and tables
    - [X] Format comparison table
    - [X] Discuss some of these pros and cons in more detail
    - [X] Why compute bound algorithms are more important in the future
    - [X] Explain sources or add more sources
    - [X] Explain what you will do next
** TODO Part 2 [4/7] [57%]
*** DONE Intro [7/7] [100%]
    CLOSED: [2018-12-19 mié 19:40]
    - [X] Add paper
    - [X] Short intro blurb
    - [X] Removes the bandwidth bottleneck and instead makes it compute bound
    - [X] Volumetric data structures are here to stay
    - [X] Explain the major steps of implementing the algorithm
    - [X] Explain what steps you will not cover
    - [X] Warning on compute shaders
*** TODO Building cluster grid [0/12] [0%]
    - [ ] Explain clustering
    - [ ] Explain the different kinds of clustering
    - [ ] Explain which one we picked
    - [ ] Show the formula
    - [ ] Plot
    - [ ] Describe picture
    - [ ] Explain how you picked the tile size
    - [ ] Explain code
    - [ ] Fix up code a bit
    - [ ] Specific functions we are highlighting
    - [ ] Why do we use AABB's
    - [ ] Problems with this approach when resizing screen
*** TODO Determining Active Clusters [1/5] [20%]
    - [X] Review code
    - [ ] This is optional
    - [ ] I have not implemented it yet but this is how I would
    - [ ] Why it helps
    - [ ] Helps for launching compute shader indirectly
*** TODO Light culling Methods [0/9] [0%]
    - [ ] Repeat visualization because it is cool
    - [ ] Light culling compute shader is much larger
    - [ ] Explain the major data structures
    - [ ] Remind readers of what we already have achieved so far
    - [ ] How we check light intersection
    - [ ] Add picture of data structure?
    - [ ] Why do we need data structures that are so convoluted
    - [ ] Carefully explain code section
    - [ ] What do we do after the light list has been completed
*** DONE Optimization techniques [6/6] [100%]
    CLOSED: [2018-12-17 lun 09:27]
    - [X] Mention that there is still things that could be improved
    - [X] Explain BVH spatial subdivision
    - [X] Explain the other techniques like virtual shadow maps
    - [X] GPU level optimizations like wave whatever explained in doom pres
    - [X] DOOM 2016 using clusters for more than just lights
    - [X] Outro
*** DONE Successful Implementations [3/3] [100%]
    CLOSED: [2018-12-16 dom 19:49]
    - [X] Mention some further reading you can do
    - [X] Link to successful implementations of games
    - [X] Re-link to my own clustered renderer
*** DONE Outro  [1/1] [100%]
    CLOSED: [2018-12-16 dom 19:49]
    - [X] Thanks for reading post and links to my email and twitter
** DONE Image fixing [2/2] [100%]
   CLOSED: [2018-12-17 lun 19:06]
    - [X] Change picture of tiled shading 
    - [X] Change picture of overdraw N1
* Scrapped points
- [ ] Field of global illumination and many lights
- [ ] Strength to turn splatting into gathering techniques
* Ideas
- Thermodynamics analogy to computing resources?! GPU - CPU etc
- How to determine how close we are to peak rendering capacity 
- How close are we to the theoretical limits?
* Mehnaaz Comments
** Will do
   - [X] Fix yet opposed
   - [X] Remove anyway 
   - [X] Quickly grew into
   - [X] Further readings
   - [ ] Graphics programming is my main interest
** Maybe
   - [ ] Check for predecessor alternative
   - [ ] Double negative alternative after free lunch
   - [ ] Put twitter logo
   - [ ] View frustum to 3D
   - [ ] Milestone achieved!

